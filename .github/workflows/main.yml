name: Flutter CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      # 1️⃣ Install Android SDK
      - name: Install Android SDK
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip
          mv cmdline-tools latest
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0"

      - name: Install dependencies
        run: flutter pub get

      # 2️⃣ Regenerate Android folder
      - name: Regenerate Android folder
        run: |
          rm -rf android
          flutter create . --platforms=android

      # 3️⃣ Patch app build.gradle
      - name: Patch app build.gradle
        run: |
          APP_GRADLE="android/app/build.gradle"
          sed -i '/android {/a\    namespace "com.example.adhimusic"' $APP_GRADLE
          sed -i 's/compileSdkVersion [0-9]\+/compileSdkVersion 35/' $APP_GRADLE || true
          sed -i 's/targetSdkVersion [0-9]\+/targetSdkVersion 35/' $APP_GRADLE || true
          sed -i 's/minSdkVersion [0-9]\+/minSdkVersion 21/' $APP_GRADLE || true
          sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' $APP_GRADLE
          sed -i '/android {/a\    kotlinOptions {\n        jvmTarget = "17"\n    }' $APP_GRADLE

      # 4️⃣ Patch all plugin namespaces and Kotlin/Java
      - name: Patch plugin namespaces and compatibility
        run: |
          find $HOME/.pub-cache -type f -path "*/android/build.gradle" | while read gradle; do
            if ! grep -q "namespace " "$gradle"; then
              pkg=$(basename $(dirname $gradle))
              sed -i "/android {/a\    namespace \"com.plugin.$pkg\"" "$gradle"
            fi
            sed -i '/android {/a\    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }' "$gradle"
            sed -i '/android {/a\    kotlinOptions {\n        jvmTarget = "17"\n    }' "$gradle"
          done

      # 5️⃣ Patch specific plugin manifests (e.g., on_audio_query_android)
      - name: Patch plugin manifests
        run: |
          MANIFEST="$HOME/.pub-cache/hosted/pub.dev/on_audio_query_android-1.1.0/android/src/main/AndroidManifest.xml"
          if [ -f "$MANIFEST" ]; then
            sed -i 's/package="com.lucasjosino.on_audio_query"//' "$MANIFEST"
          fi
          echo "✅ Patched on_audio_query_android manifest"

      # 6️⃣ Patch AndroidManifest.xml for permissions
      - name: Patch AndroidManifest.xml
        run: |
          MANIFEST="android/app/src/main/AndroidManifest.xml"
          sed -i '/<application/i\
          <uses-permission android:name="android.permission.INTERNET"/>\n\
          <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>\n\
          <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>' $MANIFEST

      # 7️⃣ Generate launcher icons
      - name: Generate launcher icons
        run: flutter pub run flutter_launcher_icons

      # 8️⃣ Build release APK
      - name: Build release APK
        run: flutter build apk --release

      # 9️⃣ Upload APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
